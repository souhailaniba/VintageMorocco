import { Component } from '@angular/core';
import { CartsService } from 'src/app/service/carts.service';
import { ProfileService } from 'src/app/service/profile.service';
import jsPDF from 'jspdf'
import autoTable from 'jspdf-autotable';


@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css']
})
export class CartComponent {
constructor(private service: CartsService, private uservice:ProfileService){

}
  success:boolean=false
  cartProducts : any[]= []
  cartTotal : any= 0
  ngOnInit(): void {
      this.getCartProducts();
      this.userId = localStorage.getItem('userId');
      this.uservice.getUser(this.userId).subscribe((data: any) => {
    
      this.name = data.name;
      this.email = data.email;
      this.phone = data.phone;
      this.address = data.address;

  });
  }
  getCartProducts(){
    if("cart" in localStorage ){
      this.cartProducts = JSON.parse(localStorage.getItem("cart")!)
    }
    this.getCartTotal();
  }
  getCartTotal(){
    this.cartTotal = 0;
    for(let x in this.cartProducts){
      this.cartTotal +=  this.cartProducts[x].item.price * this.cartProducts[x].quantity;
    }
  }
  minus(index: number){
    this.cartProducts[index].quantity--
    this.getCartTotal();
    localStorage.setItem("cart", JSON.stringify(this.cartProducts))

  }
  plus(index: number){
    this.cartProducts[index].quantity++
    this.getCartTotal();
    localStorage.setItem("cart", JSON.stringify(this.cartProducts))

  }

  detectChange(){
    this.getCartTotal();
    localStorage.setItem("cart", JSON.stringify(this.cartProducts))
  }

  deleteProduct(index: number){
    this.getCartTotal();
    this.cartProducts.splice(index, 1)
    localStorage.setItem("cart", JSON.stringify(this.cartProducts))
  }
  clearCart(){ 
    this.cartProducts=[]
    this.getCartTotal();
    localStorage.setItem("cart", JSON.stringify(this.cartProducts))

  }
  addCart(){
    let products= this.cartProducts.map(item =>{
      return {productId: item.item.id,quantity:item.quantiti}
    })
    let Model={
      userId : 5,
      date : new Date(),
      products:[]
    }
    this.service.createNewCart(Model).subscribe(res =>
      {
          this.success=true
      })
    console.log(Model)
  }

  // pdf rawaj

  public name: string = '';
  public email: string = '';
  public phone: string = '';
  public address: string = '';
  public userId: string | null = '';

  

  generatePDF() {
    // Create a new jsPDF instance
    const doc = new jsPDF();
  
    // Set the logo dimensions
    const logoWidth = 50;
    const logoHeight = 50;
  
    // Add your website logo
    doc.addImage('./assets/Images/LOGO-Vintage-05.png', 'PNG', 10, 10, logoWidth, logoHeight);
  
    // Add user information
    doc.setFont('Helvetica', 'bold');
    doc.setFontSize(15);
    doc.text('User Information', 10, 80);
    doc.setFont('Helvetica', 'normal');
    doc.setFontSize(13);
    doc.text(`Name: ${this.name}`, 10, 90);
    doc.text(`Phone: ${this.phone}`, 10, 100);
    doc.text(`Email: ${this.email}`, 10, 110);
    doc.text(`Address: ${this.address}`, 10, 120);
  
    // Add cart products information in a table
    doc.setFontSize(15);
    doc.setFillColor('black');
    doc.setFont('Helvetica', 'bold');
    doc.text('Cart Products', 10, 140);
    doc.setFont('Helvetica', 'normal');
    doc.setFontSize(15);
    const headers = [['Item', 'Quantity', 'Price', 'Total']];
    const data = this.cartProducts.map((item, index) => [
      item.item.title,
      item.quantity,
      `${item.item.price} DHS`,
      `${item.item.price * item.quantity} DHS`
    ]);
    const tableX = 10;
    const tableY = 150;
    autoTable(doc,{
      startY: tableY,
      head: headers,
      body: data,
      theme: 'grid',
      styles: {
        halign: 'center'
      },
      columnStyles: {
        0: {cellWidth: 63},
        1: {cellWidth: 40},
        2: {cellWidth: 40},
        3: {cellWidth: 40}
      }
    });
  
    // Add total amount
    const totalY = tableY + this.cartProducts.length * 10 + 10;
    doc.setFont('Helvetica', 'bold');
    doc.setFontSize(15);
    doc.text(`Total Amount: ${this.cartTotal} DHS`, 10, totalY+10);
    doc.setFont('Helvetica', 'normal');
  
    // Set the PDF creator and creation date
    const creator = 'Vintage Morocco';
    const creationDate = new Date().toLocaleString();
    doc.setFontSize(13);
    doc.setTextColor(150);
    doc.text(`Generated by ${creator} on ${creationDate}`, doc.internal.pageSize.width -160, doc.internal.pageSize.height - 10);
  
    // Save the PDF
    doc.save('YourBill.pdf');
  }
  

  
}